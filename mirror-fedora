#!/bin/sh
################################################################################
# mirror-fedora - Dale Bewley < dale a/t bewley.net >
#-------------------------------------------------------------------------------
# Script used to rsync a mirror. Originally designed for a Fedora mirror.
#
# * https://github.com/dlbewley/mirror-fedora
#
# See the README 
#
################################################################################

#-- Configuration --------------------------------------------------------------
# uncomment the following if using authenticated rsync
#RSYNC_USER=user
# place password in this file if using authenticated rsync
RSYNC_PASS=$(dirname $0)/password
RSYNC_EXCLUDES=$(dirname $0)/excludes
RSYNC_PARTIAL_DIR=.rsync-partial-dir
# Uncomment for a more interesting manual run (not cron)
#RSYNC_BONUS_ARGS="-h --stats --progress --bwlimit=1290"

LOCK_FILE=$(dirname $0)/running
LAST_RUN=$(dirname $0)/last-run

# this file can be used to override the settings found above
CONFIG=$(dirname $0)/mirror-fedora.conf
#-------------------------------------------------------------------------------

#Use the config file specific to host
if [ -f "${CONFIG}.${HOSTNAME}" ]; then
    . "${CONFIG}.${HOSTNAME}"
else
    # override above options as needed
    . $CONFIG
fi

LOGTAG=`basename $0`
LOGGER="logger -t $LOGTAG"

start_time=`date +%s`
$LOGGER "start"

if [ -f "$LOCK_FILE" ]; then
    OLD_PID=`head -n 1 "$LOCK_FILE"`
    TEST_RUNNING=`ps -p $OLD_PID | grep $OLD_PID`
    if [ -z "$TEST_RUNNING" ]; then
	$LOGGER "WARNING Stale PID [$OLD_PID] found in $LOCK_FILE. Overriding."
        echo $$ > "$LOCK_FILE"
    else
	$LOGGER  "ERROR already running with PID $OLD_PID"
        exit 0
    fi
else
    # Not running
    $LOGGER "locking before run"
    echo $$ > "$LOCK_FILE"
fi

# get time of last run in format suitable for MM query
if [ -r "$LAST_RUN" ]; then
    last_run_epoch_utc=$(date --utc +%s --date "`stat --printf %z $LAST_RUN`")
else
    last_run_epoch_utc=0
fi
$LOGGER "last run was " `date --utc --date @$last_run_epoch_utc`

user_arg=''
password_arg=''
if [ -n "$RSYNC_USER" ]; then
	user_arg="${RSYNC_USER}@"
	password_arg="--password-file=${RSYNC_PASS}"
fi

#Keep track of rsync return code
RSYNC_SUCCESS=""
RSYNC_FAILURE=""

function do_rsync() {
    local RSYNC_MODULE=$1
    local MIRROR_ROOT=$2
    if [ -n "$RSYNC_MODULE" ] && [ -n "$MIRROR_ROOT" ]; then

        $LOGGER "begin ${RSYNC_MODULE} sync"
        # the order of the excludes is significant
        rsync ${RSYNC_BONUS_ARGS} \
            --verbose \
            --archive \
            --hard-links \
            --numeric-ids \
            --force \
            --partial-dir=${RSYNC_PARTIAL_DIR} \
            --delete \
            --delete-delay \
            --delay-updates \
            --exclude=${RSYNC_PARTIAL_DIR} \
            --exclude-from=${RSYNC_EXCLUDES} \
            rsync://${user_arg}${RSYNC_MODULE}/ \
            $password_arg \
            $MIRROR_ROOT

        # acceptable rsync exit codes:
        #       0      Success
        #       23     Partial transfer due to error
        #       24     Partial transfer due to vanished source files
        if [ $? -eq 0 -o $? -eq 23 -o $? -eq 24 ]; then
            RSYNC_SUCCESS="$RSYNC_MODULE $RSYNC_SUCCESS"
        else
            RSYNC_FAILURE="$RSYNC_MODULE $RSYNC_FAILURE"
        fi

        $LOGGER "end ${RSYNC_MODULE} sync"
    fi
}

do_rsync ${RSYNC_FEDORA_MODULE} ${FEDORA_MIRROR_ROOT}
do_rsync ${RSYNC_EPEL_MODULE} ${EPEL_MIRROR_ROOT}
do_rsync ${RSYNC_CENTOS_MODULE} ${CENTOS_MIRROR_ROOT}
do_rsync ${RSYNC_PUPPETLABS_MODULE} ${PUPPETLABS_MIRROR_ROOT}
do_rsync ${RSYNC_LINUXMINT_MODULE} ${LINUXMINT_MIRROR_ROOT}
do_rsync ${RSYNC_OPENSUSEDIST_MODULE} ${OPENSUSEDIST_MIRROR_ROOT}
do_rsync ${RSYNC_OPENSUSEUPDATE_MODULE} ${OPENSUSEUPDATE_MIRROR_ROOT}
do_rsync ${RSYNC_OPENSUSEPUPPET_MODULE} ${OPENSUSEPUPPET_MIRROR_ROOT}

touch --date "@$(($start_time - 30))" $LAST_RUN

# update mirror status in the MirrorManager database
$LOGGER "reporting to mirrormanager"
$(dirname $0)/report_mirror_proxy.py
if [ $? -ne 0 ]; then
	$LOGGER "ERROR failed to report to mirrormanager"
fi

#When used from cron, this should send email that there was rsync failure
if [ -z "$RSYNC_FAILURE" ]; then
    >&2 echo "Failure rsync of $RSYNC_FAILURE"
fi

rm -f "$LOCK_FILE"
$LOGGER "stop"
